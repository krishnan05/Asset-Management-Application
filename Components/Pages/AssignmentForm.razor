@using AssetManagement.Shared.Models
@using AssetManagementApp.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IAssetClientService AssetService
@inject IEmployeeClientService EmployeeService
@inject NavigationManager Navigation

<h3>@Title Assignment</h3>

<EditForm Model="@AssignmentDto" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="asset" class="form-label">Asset</label>
        <InputSelect id="asset" class="form-select" @bind-Value="AssignmentDto.AssetId">
            <option value="0">Select Asset</option>
            @foreach (var asset in AvailableAssets)
            {
                <option value="@asset.Id">@asset.Name (@asset.SerialNumber)</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => AssignmentDto.AssetId)" />
    </div>

    <div class="mb-3">
        <label for="employee" class="form-label">Employee</label>
        <InputSelect id="employee" class="form-select" @bind-Value="AssignmentDto.EmployeeId">
            <option value="0">Select Employee</option>
            @foreach (var employee in Employees)
            {
                <option value="@employee.Id">@employee.Name (@employee.Department)</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => AssignmentDto.EmployeeId)" />
    </div>

    <div class="mb-3">
        <label for="assignedDate" class="form-label">Assigned Date</label>
        <InputDate id="assignedDate" class="form-control" @bind-Value="AssignmentDto.AssignedDate" />
        <ValidationMessage For="@(() => AssignmentDto.AssignedDate)" />
    </div>

    <div class="mb-3">
        <label for="returnDate" class="form-label">Expected Return Date (Optional)</label>
        <InputDate id="returnDate" class="form-control" @bind-Value="AssignmentDto.ReturnDate" />
        <ValidationMessage For="@(() => AssignmentDto.ReturnDate)" />
    </div>

    <button type="submit" class="btn btn-primary">Save Assignment</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public AssetAssignmentDto AssignmentDto { get; set; } = new AssetAssignmentDto();

    [Parameter]
    public EventCallback<AssetAssignmentDto> OnSubmit { get; set; }

    [Parameter]
    public string Title { get; set; } = "Create";

    private List<Asset> AvailableAssets { get; set; } = new();
    private List<Employee> Employees { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AvailableAssets = (await AssetService.GetAllAssetsAsync())
                ?.Where(a => a.Status == AssetStatus.Available || a.Id == AssignmentDto.AssetId)
                .ToList() ?? new List<Asset>();

            Employees = await EmployeeService.GetEmployeesAsync() ?? new List<Employee>();

            if (AssignmentDto.AssignedDate == default)
            {
                AssignmentDto.AssignedDate = DateTime.Today;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data for assignment form: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (AssignmentDto.AssetId == 0 || AssignmentDto.EmployeeId == 0)
        {
            return;
        }

        await OnSubmit.InvokeAsync(AssignmentDto);

        Navigation.NavigateTo("/assignments");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/assignments");
    }
}