@page "/assets/edit/{AssetId:int}"
@using AssetManagement.Shared.Models
@using AssetManagementApp.Services
@inject IAssetClientService AssetService
@inject NavigationManager Navigation

<PageTitle>Edit Asset</PageTitle>

@if (AssetToEdit == null)
{
    <p><em>Loading asset details...</em></p>
}
else
{
    <AssetForm Asset="AssetToEdit" 
               Title="Edit" 
               OnSubmit="HandleUpdateAsset" />
}


@code {
    // Parameter captured from the URL route: /assets/edit/{id}
    [Parameter]
    public int AssetId { get; set; }

    private Asset? AssetToEdit;
    private bool isLoading = true;

    // Runs when the component is initialized and the AssetId is set
    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        try
        {
            // Fetch the asset details using the ID from the route
            AssetToEdit = await AssetService.GetAssetByIdAsync(AssetId);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching asset {AssetId}: {ex.Message}");
            // Navigate to an error page or back to the list
            Navigation.NavigateTo("/assets");
        }
        isLoading = false;
    }

    private async Task HandleUpdateAsset(Asset updatedAsset)
    {
        try
        {
            await AssetService.UpdateAssetAsync(updatedAsset);
            
            // Redirect to the main asset list upon success
            Navigation.NavigateTo("/assets");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error updating asset: {ex.Message}");
            // Handle update error (e.g., display message)
        }
    }
}