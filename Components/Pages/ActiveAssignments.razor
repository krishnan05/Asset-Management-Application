@page "/activeassignments"
@inject IAssetAssignmentClientService AssignmentService
@using AssetManagementApp.Services
@using AssetManagement.Shared.Models

<h3>Active Asset Assignments</h3>

@if (Assignments == null)
{
    <p><em>Loading...</em></p>
}
else if (Assignments.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Asset</th>
                <th>Employee</th>
                <th>Assigned Date</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var assignment in Assignments)
            {
                <tr>
                    <td>@assignment.Asset?.Name</td>
                    <td>@assignment.Employee?.Name</td>  
                    <td>@assignment.AssignedDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-success" @onclick="() => HandleReturn(assignment.Id)">Return</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info">No assets are currently assigned.</div>
}

@code {
    private List<AssetAssignment>? Assignments;

    protected override async Task OnInitializedAsync()
    {
        await LoadActiveAssignments();
    }

    private async Task LoadActiveAssignments()
    {
        // Calls GET api/AssetAssignments/Active
        Assignments = await AssignmentService.GetActiveAssignmentsAsync();
    }

    private async Task HandleReturn(int assignmentId)
    {
        try
        {
            // Calls PUT api/AssetAssignments/Return/{id}
            await AssignmentService.ReturnAssetAsync(assignmentId);
            
            // Refresh the list immediately
            await LoadActiveAssignments();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error returning asset: {ex.Message}");
            // Add user notification for failed return here if necessary
        }
    }
}