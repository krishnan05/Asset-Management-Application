@page "/employees"
@using AssetManagementApp.Services
@inject IEmployeeClientService EmployeeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using AssetManagement.Shared.Models

<h3>Employee Directory</h3>

<a href="/employees/create" class="btn btn-success mb-3">Add New Employee</a>

@if (employees == null)
{
    <p><em>Loading employees...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Department</th>
                <th>Phone</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Email</td>
                    <td>@employee.Department</td>
                    <td>@employee.Phone</td>
                    <td>
                        <a href="/employees/edit/@employee.Id" class="btn btn-sm btn-primary">Edit</a>
                        <button @onclick="() => DeleteEmployee(employee.Id)" class="btn btn-sm btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await EmployeeService.GetEmployeesAsync();
        }
        catch (Exception ex)
        { 
            Console.WriteLine($"Error fetching employees: {ex.Message}");
        }
    }

    private async Task DeleteEmployee(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?"))
        {
            await EmployeeService.DeleteEmployeeAsync(id);
            await LoadEmployees(); // Refresh the list
        }
    }
}