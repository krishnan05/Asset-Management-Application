@page "/assignments"
@using AssetManagementApp.Services
@inject IAssetAssignmentClientService AssignmentService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using AssetManagement.Shared.Models

<h3>Asset Assignments</h3>

<a href="/assignments/create" class="btn btn-success mb-3">Assign Asset</a>

@if (assignments == null)
{
    <p><em>Loading assignments...</em></p>
}
else if (assignments.Count == 0)
{
    <p><em>No assignments found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Asset</th>
                <th>Employee</th>
                <th>Assigned Date</th>
                <th>Return Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var assignment in assignments)
            {
                <tr>
                    <td>@assignment.AssetName</td>
                    <td>@assignment.EmployeeName</td>
                    <td>@assignment.AssignedDate.ToShortDateString()</td>
                    <td>@(assignment.ReturnDate.HasValue ? assignment.ReturnDate.Value.ToShortDateString() : "N/A")</td>
                    <td>
                        <a href="/assignments/edit/@assignment.Id" class="btn btn-sm btn-primary">Edit</a>
                        <button @onclick="() => DeleteAssignment(assignment.Id)" class="btn btn-sm btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<AssetAssignmentDto>? assignments;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssignments();
    }

    private async Task LoadAssignments()
    {
        try
        {
            assignments = await AssignmentService.GetAllAssignmentsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching assignments: {ex.Message}");
        }
    }

    private async Task DeleteAssignment(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this assignment?"))
        {
            await AssignmentService.ReturnAssetAsync(id);
            await LoadAssignments(); 
        }
    }
}